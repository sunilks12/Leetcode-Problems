# -*- coding: utf-8 -*-
"""53_maximum_subarray.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xv5iHkDHjSxykMxWn8fwIXJzEE00cZmJ

Given an integer array nums, find the 
subarray
 which has the largest sum and return its sum.
"""

nums=[-2,1,-3,4,-1,2,1,-5,4]

max_pro=nums[0]

min_pro=nums[0]
result=max_pro
for i in range(1,len(nums)):
  curr=nums[i]
  temp_max=max(curr,curr+max_pro,curr+min_pro)
  min_pro= min(curr,curr+max_pro,curr+min_pro)
  max_pro=temp_max
  result=max(max_pro,result)
print(result)

class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
      max_pro=nums[0]
      min_pro=nums[0]
      result=max_pro
      for i in range(1,len(nums)):
        curr=nums[i]
        temp_max=max(curr,curr+max_pro,curr+min_pro)
        min_pro= min(curr,curr+max_pro,curr+min_pro)
        max_pro=temp_max
        result=max(max_pro,result)
      print(result)

