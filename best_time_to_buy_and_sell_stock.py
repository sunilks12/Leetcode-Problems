# -*- coding: utf-8 -*-
"""Best_time_to buy_and_sell_stock.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xv5iHkDHjSxykMxWn8fwIXJzEE00cZmJ

You are given an array prices where prices[i] is the price of a given stock on the ith day.

You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.
"""

def maximum_profit(price):
  lst=[]
  for i in range(len(price)):
    for j in range(i+1,len(price)):
      a= price[j]-price[i]
      lst.append(a)
  if max(lst)<0:
    return 0
  else:
    return max(lst)

maximum_profit(price=[7,6,4,3,10])


# Solution2
def maxProfit(prices):
    maxp = 0

    l = 0
    for r in range(1, len(prices)):
        if prices[r] < prices[l]:
            l = r
        maxp = max(maxp, prices[r] - prices[l])
    return maxp

maxProfit(prices=[7,6,4,3,1])

