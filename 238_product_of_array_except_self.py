# -*- coding: utf-8 -*-
"""238_product_of_array_except_self.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xv5iHkDHjSxykMxWn8fwIXJzEE00cZmJ

Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].

The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

You must write an algorithm that runs in O(n) time and without using the division operation.
"""

nums=[1,2,3,4]

lst=[]
product=1
for i in range(len(nums)):
  product=product*nums[i]
for i in range(len(nums)):
  a=product/nums[i]
  lst.append(a)

lst

def productExceptSelf(nums):
    res = [1] * (len(nums))

    prefix = 1
    for i in range(len(nums)):
        res[i] = prefix
        prefix *= nums[i]
    postfix = 1
    for i in range(len(nums) - 1, -1, -1):
        res[i] *= postfix
        postfix *= nums[i]
    return res



